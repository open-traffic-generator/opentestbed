// Open Traffic Generator Testbed Model API 0.0.5
// OTG Testbed Model
// License: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: opentestbed.proto

package opentestbed

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Device_Role_Enum int32

const (
	Device_Role_unspecified Device_Role_Enum = 0
	Device_Role_DUT         Device_Role_Enum = 1
	Device_Role_ATE         Device_Role_Enum = 2
	Device_Role_L1S         Device_Role_Enum = 3
)

// Enum value maps for Device_Role_Enum.
var (
	Device_Role_Enum_name = map[int32]string{
		0: "unspecified",
		1: "DUT",
		2: "ATE",
		3: "L1S",
	}
	Device_Role_Enum_value = map[string]int32{
		"unspecified": 0,
		"DUT":         1,
		"ATE":         2,
		"L1S":         3,
	}
)

func (x Device_Role_Enum) Enum() *Device_Role_Enum {
	p := new(Device_Role_Enum)
	*p = x
	return p
}

func (x Device_Role_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Device_Role_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_opentestbed_proto_enumTypes[0].Descriptor()
}

func (Device_Role_Enum) Type() protoreflect.EnumType {
	return &file_opentestbed_proto_enumTypes[0]
}

func (x Device_Role_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Device_Role_Enum.Descriptor instead.
func (Device_Role_Enum) EnumDescriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{1, 0, 0}
}

type Port_Pmd_Enum int32

const (
	Port_Pmd_unspecified        Port_Pmd_Enum = 0
	Port_Pmd_PMD_UNSPECIFIED    Port_Pmd_Enum = 1
	Port_Pmd_PMD_10GBASE_LRM    Port_Pmd_Enum = 2
	Port_Pmd_PMD_10GBASE_LR     Port_Pmd_Enum = 3
	Port_Pmd_PMD_10GBASE_ZR     Port_Pmd_Enum = 4
	Port_Pmd_PMD_10GBASE_ER     Port_Pmd_Enum = 5
	Port_Pmd_PMD_10GBASE_SR     Port_Pmd_Enum = 6
	Port_Pmd_PMD_40GBASE_CR4    Port_Pmd_Enum = 7
	Port_Pmd_PMD_40GBASE_SR4    Port_Pmd_Enum = 8
	Port_Pmd_PMD_40GBASE_LR4    Port_Pmd_Enum = 9
	Port_Pmd_PMD_40GBASE_ER4    Port_Pmd_Enum = 10
	Port_Pmd_PMD_40GBASE_PSM4   Port_Pmd_Enum = 11
	Port_Pmd_PMD_4X10GBASE_LR   Port_Pmd_Enum = 12
	Port_Pmd_PMD_4X10GBASE_SR   Port_Pmd_Enum = 13
	Port_Pmd_PMD_100G_AOC       Port_Pmd_Enum = 14
	Port_Pmd_PMD_100G_ACC       Port_Pmd_Enum = 15
	Port_Pmd_PMD_100GBASE_SR10  Port_Pmd_Enum = 16
	Port_Pmd_PMD_100GBASE_SR4   Port_Pmd_Enum = 17
	Port_Pmd_PMD_100GBASE_LR4   Port_Pmd_Enum = 18
	Port_Pmd_PMD_100GBASE_ER4   Port_Pmd_Enum = 19
	Port_Pmd_PMD_100GBASE_CWDM4 Port_Pmd_Enum = 20
	Port_Pmd_PMD_100GBASE_CLR4  Port_Pmd_Enum = 21
	Port_Pmd_PMD_100GBASE_PSM4  Port_Pmd_Enum = 22
	Port_Pmd_PMD_100GBASE_CR4   Port_Pmd_Enum = 23
	Port_Pmd_PMD_100GBASE_FR    Port_Pmd_Enum = 24
	Port_Pmd_PMD_400GBASE_ZR    Port_Pmd_Enum = 25
	Port_Pmd_PMD_400GBASE_LR4   Port_Pmd_Enum = 26
	Port_Pmd_PMD_400GBASE_FR4   Port_Pmd_Enum = 27
	Port_Pmd_PMD_400GBASE_LR8   Port_Pmd_Enum = 28
	Port_Pmd_PMD_400GBASE_DR4   Port_Pmd_Enum = 29
	Port_Pmd_PMD_100GBASE_DR    Port_Pmd_Enum = 30
)

// Enum value maps for Port_Pmd_Enum.
var (
	Port_Pmd_Enum_name = map[int32]string{
		0:  "unspecified",
		1:  "PMD_UNSPECIFIED",
		2:  "PMD_10GBASE_LRM",
		3:  "PMD_10GBASE_LR",
		4:  "PMD_10GBASE_ZR",
		5:  "PMD_10GBASE_ER",
		6:  "PMD_10GBASE_SR",
		7:  "PMD_40GBASE_CR4",
		8:  "PMD_40GBASE_SR4",
		9:  "PMD_40GBASE_LR4",
		10: "PMD_40GBASE_ER4",
		11: "PMD_40GBASE_PSM4",
		12: "PMD_4X10GBASE_LR",
		13: "PMD_4X10GBASE_SR",
		14: "PMD_100G_AOC",
		15: "PMD_100G_ACC",
		16: "PMD_100GBASE_SR10",
		17: "PMD_100GBASE_SR4",
		18: "PMD_100GBASE_LR4",
		19: "PMD_100GBASE_ER4",
		20: "PMD_100GBASE_CWDM4",
		21: "PMD_100GBASE_CLR4",
		22: "PMD_100GBASE_PSM4",
		23: "PMD_100GBASE_CR4",
		24: "PMD_100GBASE_FR",
		25: "PMD_400GBASE_ZR",
		26: "PMD_400GBASE_LR4",
		27: "PMD_400GBASE_FR4",
		28: "PMD_400GBASE_LR8",
		29: "PMD_400GBASE_DR4",
		30: "PMD_100GBASE_DR",
	}
	Port_Pmd_Enum_value = map[string]int32{
		"unspecified":        0,
		"PMD_UNSPECIFIED":    1,
		"PMD_10GBASE_LRM":    2,
		"PMD_10GBASE_LR":     3,
		"PMD_10GBASE_ZR":     4,
		"PMD_10GBASE_ER":     5,
		"PMD_10GBASE_SR":     6,
		"PMD_40GBASE_CR4":    7,
		"PMD_40GBASE_SR4":    8,
		"PMD_40GBASE_LR4":    9,
		"PMD_40GBASE_ER4":    10,
		"PMD_40GBASE_PSM4":   11,
		"PMD_4X10GBASE_LR":   12,
		"PMD_4X10GBASE_SR":   13,
		"PMD_100G_AOC":       14,
		"PMD_100G_ACC":       15,
		"PMD_100GBASE_SR10":  16,
		"PMD_100GBASE_SR4":   17,
		"PMD_100GBASE_LR4":   18,
		"PMD_100GBASE_ER4":   19,
		"PMD_100GBASE_CWDM4": 20,
		"PMD_100GBASE_CLR4":  21,
		"PMD_100GBASE_PSM4":  22,
		"PMD_100GBASE_CR4":   23,
		"PMD_100GBASE_FR":    24,
		"PMD_400GBASE_ZR":    25,
		"PMD_400GBASE_LR4":   26,
		"PMD_400GBASE_FR4":   27,
		"PMD_400GBASE_LR8":   28,
		"PMD_400GBASE_DR4":   29,
		"PMD_100GBASE_DR":    30,
	}
)

func (x Port_Pmd_Enum) Enum() *Port_Pmd_Enum {
	p := new(Port_Pmd_Enum)
	*p = x
	return p
}

func (x Port_Pmd_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Port_Pmd_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_opentestbed_proto_enumTypes[1].Descriptor()
}

func (Port_Pmd_Enum) Type() protoreflect.EnumType {
	return &file_opentestbed_proto_enumTypes[1]
}

func (x Port_Pmd_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Port_Pmd_Enum.Descriptor instead.
func (Port_Pmd_Enum) EnumDescriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{2, 0, 0}
}

type Port_Speed_Enum int32

const (
	Port_Speed_unspecified       Port_Speed_Enum = 0
	Port_Speed_SPEED_UNSPECIFIED Port_Speed_Enum = 1
	Port_Speed_S_1GB             Port_Speed_Enum = 2
	Port_Speed_S_5GB             Port_Speed_Enum = 3
	Port_Speed_S_10GB            Port_Speed_Enum = 4
	Port_Speed_S_25GB            Port_Speed_Enum = 5
	Port_Speed_S_40GB            Port_Speed_Enum = 6
	Port_Speed_S_50GB            Port_Speed_Enum = 7
	Port_Speed_S_100GB           Port_Speed_Enum = 8
	Port_Speed_S_200GB           Port_Speed_Enum = 9
	Port_Speed_S_400GB           Port_Speed_Enum = 10
)

// Enum value maps for Port_Speed_Enum.
var (
	Port_Speed_Enum_name = map[int32]string{
		0:  "unspecified",
		1:  "SPEED_UNSPECIFIED",
		2:  "S_1GB",
		3:  "S_5GB",
		4:  "S_10GB",
		5:  "S_25GB",
		6:  "S_40GB",
		7:  "S_50GB",
		8:  "S_100GB",
		9:  "S_200GB",
		10: "S_400GB",
	}
	Port_Speed_Enum_value = map[string]int32{
		"unspecified":       0,
		"SPEED_UNSPECIFIED": 1,
		"S_1GB":             2,
		"S_5GB":             3,
		"S_10GB":            4,
		"S_25GB":            5,
		"S_40GB":            6,
		"S_50GB":            7,
		"S_100GB":           8,
		"S_200GB":           9,
		"S_400GB":           10,
	}
)

func (x Port_Speed_Enum) Enum() *Port_Speed_Enum {
	p := new(Port_Speed_Enum)
	*p = x
	return p
}

func (x Port_Speed_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Port_Speed_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_opentestbed_proto_enumTypes[2].Descriptor()
}

func (Port_Speed_Enum) Type() protoreflect.EnumType {
	return &file_opentestbed_proto_enumTypes[2]
}

func (x Port_Speed_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Port_Speed_Enum.Descriptor instead.
func (Port_Speed_Enum) EnumDescriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{2, 1, 0}
}

type Error_Kind_Enum int32

const (
	Error_Kind_unspecified Error_Kind_Enum = 0
	Error_Kind_validation  Error_Kind_Enum = 1
	Error_Kind_internal    Error_Kind_Enum = 2
)

// Enum value maps for Error_Kind_Enum.
var (
	Error_Kind_Enum_name = map[int32]string{
		0: "unspecified",
		1: "validation",
		2: "internal",
	}
	Error_Kind_Enum_value = map[string]int32{
		"unspecified": 0,
		"validation":  1,
		"internal":    2,
	}
)

func (x Error_Kind_Enum) Enum() *Error_Kind_Enum {
	p := new(Error_Kind_Enum)
	*p = x
	return p
}

func (x Error_Kind_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error_Kind_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_opentestbed_proto_enumTypes[3].Descriptor()
}

func (Error_Kind_Enum) Type() protoreflect.EnumType {
	return &file_opentestbed_proto_enumTypes[3]
}

func (x Error_Kind_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error_Kind_Enum.Descriptor instead.
func (Error_Kind_Enum) EnumDescriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{8, 0, 0}
}

// A container for Testbed model.
type Testbed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical Device with list of logical ports
	Devices []*Device `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	// Interconnection of logical ports between logical devices.
	Links []*Link `protobuf:"bytes,2,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *Testbed) Reset() {
	*x = Testbed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Testbed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Testbed) ProtoMessage() {}

func (x *Testbed) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Testbed.ProtoReflect.Descriptor instead.
func (*Testbed) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{0}
}

func (x *Testbed) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *Testbed) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

// Device.
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique id of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Id *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Name of the device that you want to match from the inventory
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Vendor(manufacturer of the device)
	Vendor *string `protobuf:"bytes,3,opt,name=vendor,proto3,oneof" json:"vendor,omitempty"`
	// Model(unique identification of the device type)
	Model *string `protobuf:"bytes,4,opt,name=model,proto3,oneof" json:"model,omitempty"`
	// Platform (describes a combination of operating system, applications, or other types
	// of software that is supported by the device)
	Platform *string `protobuf:"bytes,5,opt,name=platform,proto3,oneof" json:"platform,omitempty"`
	// Image (a unique software package installed on the device)
	Image *string `protobuf:"bytes,6,opt,name=image,proto3,oneof" json:"image,omitempty"`
	// List of Logical ports
	Ports []*Port `protobuf:"bytes,7,rep,name=ports,proto3" json:"ports,omitempty"`
	// attributes of the devices
	Attributes []*Attribute `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// Role of a device, ATE(Automatic test equipment), DUT(Device under Test) or L1S(Layer1
	// Switch).
	// The reservation system implementing the testbed model is supposed to
	// fully reserve any equipment marked as DUT.For ATE, only the ports are intended to
	// be reserved.
	// The L1S functions as a Layer 1 device, and the reservation system is not intended
	// to reserve it
	// but merely to recognize it as an intermediate device.
	// required = true
	Role *Device_Role_Enum `protobuf:"varint,9,opt,name=role,proto3,enum=opentestbed.Device_Role_Enum,oneof" json:"role,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{1}
}

func (x *Device) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Device) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Device) GetVendor() string {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return ""
}

func (x *Device) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *Device) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *Device) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *Device) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Device) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Device) GetRole() Device_Role_Enum {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return Device_Role_unspecified
}

// Local Port for Testbed Reservation Service.
type Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical identifier for the port
	// required = true
	Id *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Name of the port on a device that you want to match from the inventory.
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Physical medium dependent of the port.
	// This should be kept in sync with the values specified in OpenConfig:
	// https://github.com/openconfig/public/blob/master/release/models/optical-transport/openconfig-transport-types.yang
	// default = Pmd.Enum.pmd_unspecified
	Pmd *Port_Pmd_Enum `protobuf:"varint,3,opt,name=pmd,proto3,enum=opentestbed.Port_Pmd_Enum,oneof" json:"pmd,omitempty"`
	// Description missing in models
	// default = Speed.Enum.speed_unspecified
	Speed *Port_Speed_Enum `protobuf:"varint,4,opt,name=speed,proto3,enum=opentestbed.Port_Speed_Enum,oneof" json:"speed,omitempty"`
	// Description missing in models
	Transceiver *string `protobuf:"bytes,5,opt,name=transceiver,proto3,oneof" json:"transceiver,omitempty"`
	// attributes of the device ports that specify an internal architecture behind the port,
	// for example: NPU #, NPU Core, Slice #,
	Attributes []*Attribute `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Port) Reset() {
	*x = Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{2}
}

func (x *Port) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Port) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Port) GetPmd() Port_Pmd_Enum {
	if x != nil && x.Pmd != nil {
		return *x.Pmd
	}
	return Port_Pmd_unspecified
}

func (x *Port) GetSpeed() Port_Speed_Enum {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return Port_Speed_unspecified
}

func (x *Port) GetTransceiver() string {
	if x != nil && x.Transceiver != nil {
		return *x.Transceiver
	}
	return ""
}

func (x *Port) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// attributes of the device ports that specify an internal architecture behind the port,
// for example: NPU #, NPU Core, Slice #
type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	Key *string `protobuf:"bytes,1,opt,name=key,proto3,oneof" json:"key,omitempty"`
	// Description missing in models
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{3}
}

func (x *Attribute) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Attribute) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// Device.
type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Src *LinkSrc `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	// Description missing in models
	Dst *LinkDst `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{4}
}

func (x *Link) GetSrc() *LinkSrc {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *Link) GetDst() *LinkDst {
	if x != nil {
		return x.Dst
	}
	return nil
}

// Src for the link.
type LinkSrc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique id of a logical device
	//
	// x-constraint:
	// - /components/schemas/Device/properties/id
	//
	// x-constraint:
	// - /components/schemas/Device/properties/id
	//
	// required = true
	Device *string `protobuf:"bytes,1,opt,name=device,proto3,oneof" json:"device,omitempty"`
	// The id of a logical port of a device
	//
	// x-constraint:
	// - /components/schemas/Port/properties/id
	//
	// x-constraint:
	// - /components/schemas/Port/properties/id
	//
	// required = true
	Port *string `protobuf:"bytes,2,opt,name=port,proto3,oneof" json:"port,omitempty"`
}

func (x *LinkSrc) Reset() {
	*x = LinkSrc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkSrc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkSrc) ProtoMessage() {}

func (x *LinkSrc) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkSrc.ProtoReflect.Descriptor instead.
func (*LinkSrc) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{5}
}

func (x *LinkSrc) GetDevice() string {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return ""
}

func (x *LinkSrc) GetPort() string {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return ""
}

// Dst for the link.
type LinkDst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique id of a logical device
	//
	// x-constraint:
	// - /components/schemas/Device/properties/id
	//
	// x-constraint:
	// - /components/schemas/Device/properties/id
	//
	// required = true
	Device *string `protobuf:"bytes,1,opt,name=device,proto3,oneof" json:"device,omitempty"`
	// The id of a logical port of a device
	//
	// x-constraint:
	// - /components/schemas/port/properties/id
	//
	// x-constraint:
	// - /components/schemas/port/properties/id
	//
	// required = true
	Port *string `protobuf:"bytes,2,opt,name=port,proto3,oneof" json:"port,omitempty"`
}

func (x *LinkDst) Reset() {
	*x = LinkDst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkDst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkDst) ProtoMessage() {}

func (x *LinkDst) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkDst.ProtoReflect.Descriptor instead.
func (*LinkDst) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{6}
}

func (x *LinkDst) GetDevice() string {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return ""
}

func (x *LinkDst) GetPort() string {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return ""
}

// Output Response
type YieldResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique session id generated during reservation
	Sessionid *string `protobuf:"bytes,1,opt,name=sessionid,proto3,oneof" json:"sessionid,omitempty"`
	// Description missing in models
	Testbed *string `protobuf:"bytes,2,opt,name=testbed,proto3,oneof" json:"testbed,omitempty"`
}

func (x *YieldResponse) Reset() {
	*x = YieldResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YieldResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YieldResponse) ProtoMessage() {}

func (x *YieldResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YieldResponse.ProtoReflect.Descriptor instead.
func (*YieldResponse) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{7}
}

func (x *YieldResponse) GetSessionid() string {
	if x != nil && x.Sessionid != nil {
		return *x.Sessionid
	}
	return ""
}

func (x *YieldResponse) GetTestbed() string {
	if x != nil && x.Testbed != nil {
		return *x.Testbed
	}
	return ""
}

// Error response generated while serving API request.
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Numeric status code based on the underlying transport being used.
	// The API server MUST set this code explicitly based on following references:
	// - HTTP 4xx errors: https://datatracker.ietf.org/doc/html/rfc9110#section-15.5
	// - HTTP 5xx errors: https://datatracker.ietf.org/doc/html/rfc9110#section-15.6
	// - gRPC errors: https://grpc.github.io/grpc/core/md_doc_statuscodes.html
	// required = true
	Code *int32 `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	// Classification of error originating from within API server that may not be mapped
	// to the value in `code`.
	// Absence of this field may indicate that the error did not originate from within API
	// server.
	Kind *Error_Kind_Enum `protobuf:"varint,2,opt,name=kind,proto3,enum=opentestbed.Error_Kind_Enum,oneof" json:"kind,omitempty"`
	// List of error messages generated while executing the request.
	Errors []string `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{8}
}

func (x *Error) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *Error) GetKind() Error_Kind_Enum {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return Error_Kind_unspecified
}

func (x *Error) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

// A list of warnings that have occurred while executing the request.
type Warning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of any system specific warnings that have occurred while
	// executing the request.
	Warnings []string `protobuf:"bytes,1,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *Warning) Reset() {
	*x = Warning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Warning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Warning) ProtoMessage() {}

func (x *Warning) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Warning.ProtoReflect.Descriptor instead.
func (*Warning) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{9}
}

func (x *Warning) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

// A container for Session.
type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique session id generated during reservation.
	Id *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{10}
}

func (x *Session) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

// Version details
type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of API specification
	// default =
	ApiSpecVersion *string `protobuf:"bytes,1,opt,name=api_spec_version,json=apiSpecVersion,proto3,oneof" json:"api_spec_version,omitempty"`
	// Version of SDK generated from API specification
	// default =
	SdkVersion *string `protobuf:"bytes,2,opt,name=sdk_version,json=sdkVersion,proto3,oneof" json:"sdk_version,omitempty"`
	// Version of application consuming or serving the API
	// default =
	AppVersion *string `protobuf:"bytes,3,opt,name=app_version,json=appVersion,proto3,oneof" json:"app_version,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{11}
}

func (x *Version) GetApiSpecVersion() string {
	if x != nil && x.ApiSpecVersion != nil {
		return *x.ApiSpecVersion
	}
	return ""
}

func (x *Version) GetSdkVersion() string {
	if x != nil && x.SdkVersion != nil {
		return *x.SdkVersion
	}
	return ""
}

func (x *Version) GetAppVersion() string {
	if x != nil && x.AppVersion != nil {
		return *x.AppVersion
	}
	return ""
}

// The request has succeeded with no application content but the server
// may return a list of detailed warnings.
type Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Warning *Warning `protobuf:"bytes,1,opt,name=warning,proto3" json:"warning,omitempty"`
}

func (x *Success) Reset() {
	*x = Success{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Success) ProtoMessage() {}

func (x *Success) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Success.ProtoReflect.Descriptor instead.
func (*Success) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{12}
}

func (x *Success) GetWarning() *Warning {
	if x != nil {
		return x.Warning
	}
	return nil
}

// The request did not succeed and server has responded with error details.
type Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Failure) Reset() {
	*x = Failure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failure) ProtoMessage() {}

func (x *Failure) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failure.ProtoReflect.Descriptor instead.
func (*Failure) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{13}
}

func (x *Failure) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type ReserveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Testbed *Testbed `protobuf:"bytes,1,opt,name=testbed,proto3" json:"testbed,omitempty"`
}

func (x *ReserveRequest) Reset() {
	*x = ReserveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveRequest) ProtoMessage() {}

func (x *ReserveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveRequest.ProtoReflect.Descriptor instead.
func (*ReserveRequest) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{14}
}

func (x *ReserveRequest) GetTestbed() *Testbed {
	if x != nil {
		return x.Testbed
	}
	return nil
}

type ReserveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YieldResponse *YieldResponse `protobuf:"bytes,1,opt,name=yield_response,json=yieldResponse,proto3" json:"yield_response,omitempty"`
}

func (x *ReserveResponse) Reset() {
	*x = ReserveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveResponse) ProtoMessage() {}

func (x *ReserveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveResponse.ProtoReflect.Descriptor instead.
func (*ReserveResponse) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{15}
}

func (x *ReserveResponse) GetYieldResponse() *YieldResponse {
	if x != nil {
		return x.YieldResponse
	}
	return nil
}

type ReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *ReleaseRequest) Reset() {
	*x = ReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseRequest) ProtoMessage() {}

func (x *ReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseRequest.ProtoReflect.Descriptor instead.
func (*ReleaseRequest) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{16}
}

func (x *ReleaseRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type ReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Warning *Warning `protobuf:"bytes,1,opt,name=warning,proto3" json:"warning,omitempty"`
}

func (x *ReleaseResponse) Reset() {
	*x = ReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseResponse) ProtoMessage() {}

func (x *ReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseResponse.ProtoReflect.Descriptor instead.
func (*ReleaseResponse) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{17}
}

func (x *ReleaseResponse) GetWarning() *Warning {
	if x != nil {
		return x.Warning
	}
	return nil
}

type GetVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *Version `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetVersionResponse) Reset() {
	*x = GetVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionResponse) ProtoMessage() {}

func (x *GetVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionResponse.ProtoReflect.Descriptor instead.
func (*GetVersionResponse) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{18}
}

func (x *GetVersionResponse) GetVersion() *Version {
	if x != nil {
		return x.Version
	}
	return nil
}

type Device_Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Device_Role) Reset() {
	*x = Device_Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Role) ProtoMessage() {}

func (x *Device_Role) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Role.ProtoReflect.Descriptor instead.
func (*Device_Role) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{1, 0}
}

type Port_Pmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Port_Pmd) Reset() {
	*x = Port_Pmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port_Pmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port_Pmd) ProtoMessage() {}

func (x *Port_Pmd) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port_Pmd.ProtoReflect.Descriptor instead.
func (*Port_Pmd) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{2, 0}
}

type Port_Speed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Port_Speed) Reset() {
	*x = Port_Speed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port_Speed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port_Speed) ProtoMessage() {}

func (x *Port_Speed) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port_Speed.ProtoReflect.Descriptor instead.
func (*Port_Speed) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{2, 1}
}

type Error_Kind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Error_Kind) Reset() {
	*x = Error_Kind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentestbed_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error_Kind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error_Kind) ProtoMessage() {}

func (x *Error_Kind) ProtoReflect() protoreflect.Message {
	mi := &file_opentestbed_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error_Kind.ProtoReflect.Descriptor instead.
func (*Error_Kind) Descriptor() ([]byte, []int) {
	return file_opentestbed_proto_rawDescGZIP(), []int{8, 0}
}

var File_opentestbed_proto protoreflect.FileDescriptor

var file_opentestbed_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x61, 0x0a, 0x07, 0x54, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x22, 0xc4, 0x03, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x36, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x06, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x3a, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65,
	0x22, 0x32, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x55, 0x54,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4c,
	0x31, 0x53, 0x10, 0x03, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xfb, 0x08, 0x0a, 0x04, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x03, 0x70, 0x6d, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x2e, 0x50, 0x6d, 0x64, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x02, 0x52, 0x03, 0x70, 0x6d, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x03, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x62, 0x65, 0x64, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x9f, 0x05, 0x0a, 0x03,
	0x50, 0x6d, 0x64, 0x22, 0x97, 0x05, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x4d, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4d, 0x44, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x4c, 0x52, 0x4d, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4d, 0x44, 0x5f, 0x31,
	0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x4d, 0x44, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x5a, 0x52, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x4d, 0x44, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45,
	0x52, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4d, 0x44, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x53, 0x52, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4d, 0x44, 0x5f, 0x34,
	0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x52, 0x34, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x4d, 0x44, 0x5f, 0x34, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x52, 0x34, 0x10,
	0x08, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4d, 0x44, 0x5f, 0x34, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x4c, 0x52, 0x34, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4d, 0x44, 0x5f, 0x34, 0x30,
	0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x34, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x4d, 0x44, 0x5f, 0x34, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x53, 0x4d, 0x34, 0x10,
	0x0b, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4d, 0x44, 0x5f, 0x34, 0x58, 0x31, 0x30, 0x47, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x4c, 0x52, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4d, 0x44, 0x5f, 0x34,
	0x58, 0x31, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x52, 0x10, 0x0d, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x4d, 0x44, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x5f, 0x41, 0x4f, 0x43, 0x10, 0x0e, 0x12,
	0x10, 0x0a, 0x0c, 0x50, 0x4d, 0x44, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x5f, 0x41, 0x43, 0x43, 0x10,
	0x0f, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4d, 0x44, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x53, 0x52, 0x31, 0x30, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4d, 0x44, 0x5f,
	0x31, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x52, 0x34, 0x10, 0x11, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x4d, 0x44, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c,
	0x52, 0x34, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4d, 0x44, 0x5f, 0x31, 0x30, 0x30, 0x47,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x34, 0x10, 0x13, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4d,
	0x44, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x57, 0x44, 0x4d, 0x34,
	0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4d, 0x44, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x43, 0x4c, 0x52, 0x34, 0x10, 0x15, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4d, 0x44,
	0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x53, 0x4d, 0x34, 0x10, 0x16,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x4d, 0x44, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x43, 0x52, 0x34, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4d, 0x44, 0x5f, 0x31, 0x30,
	0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x52, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x4d, 0x44, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x5a, 0x52, 0x10, 0x19,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x4d, 0x44, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x4c, 0x52, 0x34, 0x10, 0x1a, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4d, 0x44, 0x5f, 0x34, 0x30,
	0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x52, 0x34, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x4d, 0x44, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x52, 0x38,
	0x10, 0x1c, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4d, 0x44, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x44, 0x52, 0x34, 0x10, 0x1d, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4d, 0x44, 0x5f,
	0x31, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x52, 0x10, 0x1e, 0x1a, 0xa5, 0x01,
	0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x5f, 0x31, 0x47,
	0x42, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x5f, 0x35, 0x47, 0x42, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x5f,
	0x32, 0x35, 0x47, 0x42, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x5f, 0x34, 0x30, 0x47, 0x42,
	0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x5f, 0x35, 0x30, 0x47, 0x42, 0x10, 0x07, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x5f, 0x32, 0x30, 0x30, 0x47, 0x42, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x5f, 0x34, 0x30,
	0x30, 0x47, 0x42, 0x10, 0x0a, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6d, 0x64, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x22, 0x4f, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x56, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x26, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x53, 0x72, 0x63, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x26, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x62, 0x65, 0x64, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x73, 0x74, 0x52, 0x03, 0x64, 0x73, 0x74,
	0x22, 0x53, 0x0a, 0x07, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x72, 0x63, 0x12, 0x1b, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x53, 0x0a, 0x07, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x6b, 0x0a, 0x0d, 0x59, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x4b, 0x69, 0x6e,
	0x64, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x04, 0x4b, 0x69, 0x6e,
	0x64, 0x22, 0x35, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x02, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x25, 0x0a, 0x07, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x25, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0e, 0x61, 0x70, 0x69, 0x53, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x2e, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x2e, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x22,
	0x33, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x40, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x62, 0x65, 0x64, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x52, 0x07, 0x74,
	0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x22, 0x54, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x79, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x2e,
	0x59, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x79,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x0a, 0x0e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x41,
	0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64,
	0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x22, 0x44, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0xdc, 0x01, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x12, 0x44, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x1b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x62,
	0x65, 0x64, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x62, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1b, 0x5a, 0x19, 0x2e, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x3b, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x62, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opentestbed_proto_rawDescOnce sync.Once
	file_opentestbed_proto_rawDescData = file_opentestbed_proto_rawDesc
)

func file_opentestbed_proto_rawDescGZIP() []byte {
	file_opentestbed_proto_rawDescOnce.Do(func() {
		file_opentestbed_proto_rawDescData = protoimpl.X.CompressGZIP(file_opentestbed_proto_rawDescData)
	})
	return file_opentestbed_proto_rawDescData
}

var file_opentestbed_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_opentestbed_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_opentestbed_proto_goTypes = []interface{}{
	(Device_Role_Enum)(0),      // 0: opentestbed.Device.Role.Enum
	(Port_Pmd_Enum)(0),         // 1: opentestbed.Port.Pmd.Enum
	(Port_Speed_Enum)(0),       // 2: opentestbed.Port.Speed.Enum
	(Error_Kind_Enum)(0),       // 3: opentestbed.Error.Kind.Enum
	(*Testbed)(nil),            // 4: opentestbed.Testbed
	(*Device)(nil),             // 5: opentestbed.Device
	(*Port)(nil),               // 6: opentestbed.Port
	(*Attribute)(nil),          // 7: opentestbed.Attribute
	(*Link)(nil),               // 8: opentestbed.Link
	(*LinkSrc)(nil),            // 9: opentestbed.LinkSrc
	(*LinkDst)(nil),            // 10: opentestbed.LinkDst
	(*YieldResponse)(nil),      // 11: opentestbed.YieldResponse
	(*Error)(nil),              // 12: opentestbed.Error
	(*Warning)(nil),            // 13: opentestbed.Warning
	(*Session)(nil),            // 14: opentestbed.Session
	(*Version)(nil),            // 15: opentestbed.Version
	(*Success)(nil),            // 16: opentestbed.Success
	(*Failure)(nil),            // 17: opentestbed.Failure
	(*ReserveRequest)(nil),     // 18: opentestbed.ReserveRequest
	(*ReserveResponse)(nil),    // 19: opentestbed.ReserveResponse
	(*ReleaseRequest)(nil),     // 20: opentestbed.ReleaseRequest
	(*ReleaseResponse)(nil),    // 21: opentestbed.ReleaseResponse
	(*GetVersionResponse)(nil), // 22: opentestbed.GetVersionResponse
	(*Device_Role)(nil),        // 23: opentestbed.Device.Role
	(*Port_Pmd)(nil),           // 24: opentestbed.Port.Pmd
	(*Port_Speed)(nil),         // 25: opentestbed.Port.Speed
	(*Error_Kind)(nil),         // 26: opentestbed.Error.Kind
	(*emptypb.Empty)(nil),      // 27: google.protobuf.Empty
}
var file_opentestbed_proto_depIdxs = []int32{
	5,  // 0: opentestbed.Testbed.devices:type_name -> opentestbed.Device
	8,  // 1: opentestbed.Testbed.links:type_name -> opentestbed.Link
	6,  // 2: opentestbed.Device.ports:type_name -> opentestbed.Port
	7,  // 3: opentestbed.Device.attributes:type_name -> opentestbed.Attribute
	0,  // 4: opentestbed.Device.role:type_name -> opentestbed.Device.Role.Enum
	1,  // 5: opentestbed.Port.pmd:type_name -> opentestbed.Port.Pmd.Enum
	2,  // 6: opentestbed.Port.speed:type_name -> opentestbed.Port.Speed.Enum
	7,  // 7: opentestbed.Port.attributes:type_name -> opentestbed.Attribute
	9,  // 8: opentestbed.Link.src:type_name -> opentestbed.LinkSrc
	10, // 9: opentestbed.Link.dst:type_name -> opentestbed.LinkDst
	3,  // 10: opentestbed.Error.kind:type_name -> opentestbed.Error.Kind.Enum
	13, // 11: opentestbed.Success.warning:type_name -> opentestbed.Warning
	12, // 12: opentestbed.Failure.error:type_name -> opentestbed.Error
	4,  // 13: opentestbed.ReserveRequest.testbed:type_name -> opentestbed.Testbed
	11, // 14: opentestbed.ReserveResponse.yield_response:type_name -> opentestbed.YieldResponse
	14, // 15: opentestbed.ReleaseRequest.session:type_name -> opentestbed.Session
	13, // 16: opentestbed.ReleaseResponse.warning:type_name -> opentestbed.Warning
	15, // 17: opentestbed.GetVersionResponse.version:type_name -> opentestbed.Version
	18, // 18: opentestbed.Openapi.Reserve:input_type -> opentestbed.ReserveRequest
	20, // 19: opentestbed.Openapi.Release:input_type -> opentestbed.ReleaseRequest
	27, // 20: opentestbed.Openapi.GetVersion:input_type -> google.protobuf.Empty
	19, // 21: opentestbed.Openapi.Reserve:output_type -> opentestbed.ReserveResponse
	21, // 22: opentestbed.Openapi.Release:output_type -> opentestbed.ReleaseResponse
	22, // 23: opentestbed.Openapi.GetVersion:output_type -> opentestbed.GetVersionResponse
	21, // [21:24] is the sub-list for method output_type
	18, // [18:21] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_opentestbed_proto_init() }
func file_opentestbed_proto_init() {
	if File_opentestbed_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opentestbed_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Testbed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkSrc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkDst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YieldResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Warning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Success); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Failure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port_Pmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port_Speed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentestbed_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error_Kind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_opentestbed_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_opentestbed_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_opentestbed_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_opentestbed_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_opentestbed_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_opentestbed_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_opentestbed_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_opentestbed_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_opentestbed_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opentestbed_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_opentestbed_proto_goTypes,
		DependencyIndexes: file_opentestbed_proto_depIdxs,
		EnumInfos:         file_opentestbed_proto_enumTypes,
		MessageInfos:      file_opentestbed_proto_msgTypes,
	}.Build()
	File_opentestbed_proto = out.File
	file_opentestbed_proto_rawDesc = nil
	file_opentestbed_proto_goTypes = nil
	file_opentestbed_proto_depIdxs = nil
}
